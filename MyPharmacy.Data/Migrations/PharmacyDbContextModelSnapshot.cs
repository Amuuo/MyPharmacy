// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyPharmacy.Data;

#nullable disable

namespace MyPharmacy.Data.Migrations
{
    [DbContext(typeof(PharmacyDbContext))]
    partial class PharmacyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyPharmacy.Data.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitCount")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Delivery", (string)null);
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.Pharmacist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryRx")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pharmacist", (string)null);
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionsFilled")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pharmacy", (string)null);
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.PharmacyPharmacist", b =>
                {
                    b.Property<int>("PharmacistId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyPharmacistId")
                        .HasColumnType("int");

                    b.HasKey("PharmacistId", "PharmacyId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PharmacyPharmacist", (string)null);
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.VwDeliveryDetail", b =>
                {
                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitCount")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VwDeliveryDetailId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VwDeliveryDetail", (string)null);
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.VwPharmacistSalesSummary", b =>
                {
                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacistId")
                        .HasColumnType("int");

                    b.Property<string>("PharmacyList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryRx")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalNonPrimaryUnits")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPrimaryUnits")
                        .HasColumnType("int");

                    b.ToTable("VwPharmacistSalesSummary", (string)null);
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.VwWarehouseProfit", b =>
                {
                    b.Property<decimal?>("AverageProfitPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalDeliveryRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TotalUnitCount")
                        .HasColumnType("int");

                    b.Property<string>("Warehouse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VwWarehouseProfit", (string)null);
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.Delivery", b =>
                {
                    b.HasOne("MyPharmacy.Data.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyPharmacy.Data.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.PharmacyPharmacist", b =>
                {
                    b.HasOne("MyPharmacy.Data.Models.Pharmacist", "Pharmacist")
                        .WithMany("PharmacyPharmacists")
                        .HasForeignKey("PharmacistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyPharmacy.Data.Models.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyPharmacists")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacist");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.Pharmacist", b =>
                {
                    b.Navigation("PharmacyPharmacists");
                });

            modelBuilder.Entity("MyPharmacy.Data.Models.Pharmacy", b =>
                {
                    b.Navigation("PharmacyPharmacists");
                });
#pragma warning restore 612, 618
        }
    }
}
